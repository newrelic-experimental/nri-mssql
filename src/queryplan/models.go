// Code generated by https://github.com/gocomply/xsd2go; DO NOT EDIT.
// Models for http://schemas.microsoft.com/sqlserver/2004/07/showplan
package queryplan

import (
	"encoding/xml"
)

// Element
type ShowPlanXML struct {
	XMLName xml.Name `xml:"ShowPlanXML"`

	Version string `xml:"Version,attr"`

	Build string `xml:"Build,attr"`

	ClusteredMode bool `xml:"ClusteredMode,attr,omitempty"`

	BatchSequence ShowPlanXMLBatchSequence `xml:",any"`
}

// Element
type BatchSequenceBatch struct {
	XMLName xml.Name `xml:"Batch"`

	Statements []StmtBlockType `xml:",any"`
}

// Element
type ShowPlanXMLBatchSequence struct {
	XMLName xml.Name `xml:"BatchSequence"`

	Batch []BatchSequenceBatch `xml:",any"`
}

// Element
type Condition struct {
	XMLName xml.Name `xml:"Condition"`

	QueryPlan *QueryPlanType `xml:"QueryPlan"`

	UDF []FunctionType `xml:"UDF"`
}

// Element
type Then struct {
	XMLName xml.Name `xml:"Then"`

	Statements StmtBlockType `xml:",any"`
}

// Element
type Else struct {
	XMLName xml.Name `xml:"Else"`

	Statements StmtBlockType `xml:",any"`
}

// Element
type Operation struct {
	XMLName xml.Name `xml:"Operation"`

	OperationType string `xml:"OperationType,attr"`

	QueryPlan QueryPlanType `xml:"QueryPlan"`

	UDF []FunctionType `xml:"UDF,omitempty"`
}

// Element
/*type Operation struct {
	XMLName xml.Name `xml:"Operation"`

	OperationType string `xml:"OperationType,attr"`

	QueryPlan QueryPlanType `xml:",any"`
}
*/
// Element
type OrderByColumn struct {
	XMLName xml.Name `xml:"OrderByColumn"`

	Ascending bool `xml:"Ascending,attr"`

	ColumnReference ColumnReferenceType `xml:",any"`
}

// Element
type DefinedValueValueVector struct {
	XMLName xml.Name `xml:"ValueVector"`

	ColumnReference []ColumnReferenceType `xml:",any"`
}

// Element
type DefinedValue struct {
	XMLName xml.Name `xml:"DefinedValue"`

	ValueVector *DefinedValueValueVector `xml:"ValueVector"`

	ColumnReference *ColumnReferenceType `xml:"ColumnReference"`

	ColumnReferences []ColumnReferenceType `xml:"ColumnReference"`

	ScalarOperator *ScalarType `xml:"ScalarOperator"`
}

// Element
type RunTimeCountersPerThread struct {
	XMLName xml.Name `xml:"RunTimeCountersPerThread"`

	Thread int `xml:"Thread,attr"`

	BrickId int `xml:"BrickId,attr,omitempty"`

	ActualRebinds uint64 `xml:"ActualRebinds,attr,omitempty"`

	ActualRewinds uint64 `xml:"ActualRewinds,attr,omitempty"`

	ActualRows uint64 `xml:"ActualRows,attr"`

	ActualRowsRead uint64 `xml:"ActualRowsRead,attr,omitempty"`

	Batches uint64 `xml:"Batches,attr,omitempty"`

	ActualEndOfScans uint64 `xml:"ActualEndOfScans,attr"`

	ActualExecutions uint64 `xml:"ActualExecutions,attr"`

	ActualExecutionMode ExecutionModeType `xml:"ActualExecutionMode,attr,omitempty"`

	TaskAddr uint64 `xml:"TaskAddr,attr,omitempty"`

	SchedulerId uint64 `xml:"SchedulerId,attr,omitempty"`

	FirstActiveTime uint64 `xml:"FirstActiveTime,attr,omitempty"`

	LastActiveTime uint64 `xml:"LastActiveTime,attr,omitempty"`

	OpenTime uint64 `xml:"OpenTime,attr,omitempty"`

	FirstRowTime uint64 `xml:"FirstRowTime,attr,omitempty"`

	LastRowTime uint64 `xml:"LastRowTime,attr,omitempty"`

	CloseTime uint64 `xml:"CloseTime,attr,omitempty"`

	ActualElapsedms uint64 `xml:"ActualElapsedms,attr,omitempty"`

	ActualCPUms uint64 `xml:"ActualCPUms,attr,omitempty"`

	ActualScans uint64 `xml:"ActualScans,attr,omitempty"`

	ActualLogicalReads uint64 `xml:"ActualLogicalReads,attr,omitempty"`

	ActualPhysicalReads uint64 `xml:"ActualPhysicalReads,attr,omitempty"`

	ActualPageServerReads uint64 `xml:"ActualPageServerReads,attr,omitempty"`

	ActualReadAheads uint64 `xml:"ActualReadAheads,attr,omitempty"`

	ActualPageServerReadAheads uint64 `xml:"ActualPageServerReadAheads,attr,omitempty"`

	ActualLobLogicalReads uint64 `xml:"ActualLobLogicalReads,attr,omitempty"`

	ActualLobPhysicalReads uint64 `xml:"ActualLobPhysicalReads,attr,omitempty"`

	ActualLobPageServerReads uint64 `xml:"ActualLobPageServerReads,attr,omitempty"`

	ActualLobReadAheads uint64 `xml:"ActualLobReadAheads,attr,omitempty"`

	ActualLobPageServerReadAheads uint64 `xml:"ActualLobPageServerReadAheads,attr,omitempty"`

	SegmentReads int `xml:"SegmentReads,attr,omitempty"`

	SegmentSkips int `xml:"SegmentSkips,attr,omitempty"`

	ActualLocallyAggregatedRows uint64 `xml:"ActualLocallyAggregatedRows,attr,omitempty"`

	InputMemoryGrant uint64 `xml:"InputMemoryGrant,attr,omitempty"`

	OutputMemoryGrant uint64 `xml:"OutputMemoryGrant,attr,omitempty"`

	UsedMemoryGrant uint64 `xml:"UsedMemoryGrant,attr,omitempty"`

	IsInterleavedExecuted bool `xml:"IsInterleavedExecuted,attr,omitempty"`

	ActualJoinType PhysicalOpType `xml:"ActualJoinType,attr,omitempty"`

	HpcRowCount uint64 `xml:"HpcRowCount,attr,omitempty"`

	HpcKernelElapsedUs uint64 `xml:"HpcKernelElapsedUs,attr,omitempty"`

	HpcHostToDeviceBytes uint64 `xml:"HpcHostToDeviceBytes,attr,omitempty"`

	HpcDeviceToHostBytes uint64 `xml:"HpcDeviceToHostBytes,attr,omitempty"`
}

// Element
type PartitionsAccessedPartitionRange struct {
	XMLName xml.Name `xml:"PartitionRange"`

	Start uint64 `xml:"Start,attr"`

	End uint64 `xml:"End,attr"`
}

// Element
type PartitionsAccessed struct {
	XMLName xml.Name `xml:"PartitionsAccessed"`

	PartitionCount uint64 `xml:"PartitionCount,attr"`

	PartitionRange []PartitionsAccessedPartitionRange `xml:",any"`
}

// Element
type Values struct {
	XMLName xml.Name `xml:"Values"`

	Row []ScalarExpressionListType `xml:",any"`
}

// Element
type Activation struct {
	XMLName xml.Name `xml:"Activation"`

	Type string `xml:"Type,attr"`

	FragmentElimination string `xml:"FragmentElimination,attr,omitempty"`

	Object *ObjectType `xml:",any"`
}

// Element
type BrickRouting struct {
	XMLName xml.Name `xml:"BrickRouting"`

	Object *ObjectType `xml:"Object"`

	FragmentIdColumn *SingleColumnReferenceType `xml:"FragmentIdColumn"`
}

// XSD ComplexType declarations

type StmtBlockType struct {
	XMLName xml.Name

	StmtSimple []StmtSimpleType `xml:"StmtSimple"`

	StmtCond []StmtCondType `xml:"StmtCond"`

	StmtCursor []StmtCursorType `xml:"StmtCursor"`

	StmtReceive []StmtReceiveType `xml:"StmtReceive"`

	StmtUseDb []StmtUseDbType `xml:"StmtUseDb"`

	InnerXml string `xml:",innerxml"`
}

type BaseStmtInfoType struct {
	XMLName xml.Name

	StatementCompId int `xml:"StatementCompId,attr,omitempty"`

	StatementEstRows float64 `xml:"StatementEstRows,attr,omitempty"`

	StatementId int `xml:"StatementId,attr,omitempty"`

	StatementOptmLevel string `xml:"StatementOptmLevel,attr,omitempty"`

	StatementOptmEarlyAbortReason string `xml:"StatementOptmEarlyAbortReason,attr,omitempty"`

	CardinalityEstimationModelVersion string `xml:"CardinalityEstimationModelVersion,attr,omitempty"`

	StatementSubTreeCost float64 `xml:"StatementSubTreeCost,attr,omitempty"`

	StatementText string `xml:"StatementText,attr,omitempty"`

	StatementType string `xml:"StatementType,attr,omitempty"`

	TemplatePlanGuideDB string `xml:"TemplatePlanGuideDB,attr,omitempty"`

	TemplatePlanGuideName string `xml:"TemplatePlanGuideName,attr,omitempty"`

	PlanGuideDB string `xml:"PlanGuideDB,attr,omitempty"`

	PlanGuideName string `xml:"PlanGuideName,attr,omitempty"`

	ParameterizedText string `xml:"ParameterizedText,attr,omitempty"`

	ParameterizedPlanHandle string `xml:"ParameterizedPlanHandle,attr,omitempty"`

	QueryHash string `xml:"QueryHash,attr,omitempty"`

	QueryPlanHash string `xml:"QueryPlanHash,attr,omitempty"`

	RetrievedFromCache string `xml:"RetrievedFromCache,attr,omitempty"`

	StatementSqlHandle string `xml:"StatementSqlHandle,attr,omitempty"`

	DatabaseContextSettingsId uint64 `xml:"DatabaseContextSettingsId,attr,omitempty"`

	ParentObjectId uint64 `xml:"ParentObjectId,attr,omitempty"`

	BatchSqlHandle string `xml:"BatchSqlHandle,attr,omitempty"`

	StatementParameterizationType int `xml:"StatementParameterizationType,attr,omitempty"`

	SecurityPolicyApplied bool `xml:"SecurityPolicyApplied,attr,omitempty"`

	BatchModeOnRowStoreUsed bool `xml:"BatchModeOnRowStoreUsed,attr,omitempty"`

	StatementSetOptions *SetOptionsType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type StmtSimpleType struct {
	XMLName xml.Name

	StatementCompId int `xml:"StatementCompId,attr,omitempty"`

	StatementEstRows float64 `xml:"StatementEstRows,attr,omitempty"`

	StatementId int `xml:"StatementId,attr,omitempty"`

	StatementOptmLevel string `xml:"StatementOptmLevel,attr,omitempty"`

	StatementOptmEarlyAbortReason string `xml:"StatementOptmEarlyAbortReason,attr,omitempty"`

	CardinalityEstimationModelVersion string `xml:"CardinalityEstimationModelVersion,attr,omitempty"`

	StatementSubTreeCost float64 `xml:"StatementSubTreeCost,attr,omitempty"`

	StatementText string `xml:"StatementText,attr,omitempty"`

	StatementType string `xml:"StatementType,attr,omitempty"`

	TemplatePlanGuideDB string `xml:"TemplatePlanGuideDB,attr,omitempty"`

	TemplatePlanGuideName string `xml:"TemplatePlanGuideName,attr,omitempty"`

	PlanGuideDB string `xml:"PlanGuideDB,attr,omitempty"`

	PlanGuideName string `xml:"PlanGuideName,attr,omitempty"`

	ParameterizedText string `xml:"ParameterizedText,attr,omitempty"`

	ParameterizedPlanHandle string `xml:"ParameterizedPlanHandle,attr,omitempty"`

	QueryHash string `xml:"QueryHash,attr,omitempty"`

	QueryPlanHash string `xml:"QueryPlanHash,attr,omitempty"`

	RetrievedFromCache string `xml:"RetrievedFromCache,attr,omitempty"`

	StatementSqlHandle string `xml:"StatementSqlHandle,attr,omitempty"`

	DatabaseContextSettingsId uint64 `xml:"DatabaseContextSettingsId,attr,omitempty"`

	ParentObjectId uint64 `xml:"ParentObjectId,attr,omitempty"`

	BatchSqlHandle string `xml:"BatchSqlHandle,attr,omitempty"`

	StatementParameterizationType int `xml:"StatementParameterizationType,attr,omitempty"`

	SecurityPolicyApplied bool `xml:"SecurityPolicyApplied,attr,omitempty"`

	BatchModeOnRowStoreUsed bool `xml:"BatchModeOnRowStoreUsed,attr,omitempty"`

	QueryPlan *QueryPlanType `xml:"QueryPlan"`

	UDF []FunctionType `xml:"UDF"`

	StoredProc *FunctionType `xml:"StoredProc"`

	StatementSetOptions *SetOptionsType `xml:"StatementSetOptions"`

	InnerXml string `xml:",innerxml"`
}

type StmtUseDbType struct {
	XMLName xml.Name

	Database string `xml:"Database,attr"`

	StatementCompId int `xml:"StatementCompId,attr,omitempty"`

	StatementEstRows float64 `xml:"StatementEstRows,attr,omitempty"`

	StatementId int `xml:"StatementId,attr,omitempty"`

	StatementOptmLevel string `xml:"StatementOptmLevel,attr,omitempty"`

	StatementOptmEarlyAbortReason string `xml:"StatementOptmEarlyAbortReason,attr,omitempty"`

	CardinalityEstimationModelVersion string `xml:"CardinalityEstimationModelVersion,attr,omitempty"`

	StatementSubTreeCost float64 `xml:"StatementSubTreeCost,attr,omitempty"`

	StatementText string `xml:"StatementText,attr,omitempty"`

	StatementType string `xml:"StatementType,attr,omitempty"`

	TemplatePlanGuideDB string `xml:"TemplatePlanGuideDB,attr,omitempty"`

	TemplatePlanGuideName string `xml:"TemplatePlanGuideName,attr,omitempty"`

	PlanGuideDB string `xml:"PlanGuideDB,attr,omitempty"`

	PlanGuideName string `xml:"PlanGuideName,attr,omitempty"`

	ParameterizedText string `xml:"ParameterizedText,attr,omitempty"`

	ParameterizedPlanHandle string `xml:"ParameterizedPlanHandle,attr,omitempty"`

	QueryHash string `xml:"QueryHash,attr,omitempty"`

	QueryPlanHash string `xml:"QueryPlanHash,attr,omitempty"`

	RetrievedFromCache string `xml:"RetrievedFromCache,attr,omitempty"`

	StatementSqlHandle string `xml:"StatementSqlHandle,attr,omitempty"`

	DatabaseContextSettingsId uint64 `xml:"DatabaseContextSettingsId,attr,omitempty"`

	ParentObjectId uint64 `xml:"ParentObjectId,attr,omitempty"`

	BatchSqlHandle string `xml:"BatchSqlHandle,attr,omitempty"`

	StatementParameterizationType int `xml:"StatementParameterizationType,attr,omitempty"`

	SecurityPolicyApplied bool `xml:"SecurityPolicyApplied,attr,omitempty"`

	BatchModeOnRowStoreUsed bool `xml:"BatchModeOnRowStoreUsed,attr,omitempty"`

	StatementSetOptions *SetOptionsType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type StmtCondType struct {
	XMLName xml.Name

	StatementCompId int `xml:"StatementCompId,attr,omitempty"`

	StatementEstRows float64 `xml:"StatementEstRows,attr,omitempty"`

	StatementId int `xml:"StatementId,attr,omitempty"`

	StatementOptmLevel string `xml:"StatementOptmLevel,attr,omitempty"`

	StatementOptmEarlyAbortReason string `xml:"StatementOptmEarlyAbortReason,attr,omitempty"`

	CardinalityEstimationModelVersion string `xml:"CardinalityEstimationModelVersion,attr,omitempty"`

	StatementSubTreeCost float64 `xml:"StatementSubTreeCost,attr,omitempty"`

	StatementText string `xml:"StatementText,attr,omitempty"`

	StatementType string `xml:"StatementType,attr,omitempty"`

	TemplatePlanGuideDB string `xml:"TemplatePlanGuideDB,attr,omitempty"`

	TemplatePlanGuideName string `xml:"TemplatePlanGuideName,attr,omitempty"`

	PlanGuideDB string `xml:"PlanGuideDB,attr,omitempty"`

	PlanGuideName string `xml:"PlanGuideName,attr,omitempty"`

	ParameterizedText string `xml:"ParameterizedText,attr,omitempty"`

	ParameterizedPlanHandle string `xml:"ParameterizedPlanHandle,attr,omitempty"`

	QueryHash string `xml:"QueryHash,attr,omitempty"`

	QueryPlanHash string `xml:"QueryPlanHash,attr,omitempty"`

	RetrievedFromCache string `xml:"RetrievedFromCache,attr,omitempty"`

	StatementSqlHandle string `xml:"StatementSqlHandle,attr,omitempty"`

	DatabaseContextSettingsId uint64 `xml:"DatabaseContextSettingsId,attr,omitempty"`

	ParentObjectId uint64 `xml:"ParentObjectId,attr,omitempty"`

	BatchSqlHandle string `xml:"BatchSqlHandle,attr,omitempty"`

	StatementParameterizationType int `xml:"StatementParameterizationType,attr,omitempty"`

	SecurityPolicyApplied bool `xml:"SecurityPolicyApplied,attr,omitempty"`

	BatchModeOnRowStoreUsed bool `xml:"BatchModeOnRowStoreUsed,attr,omitempty"`

	Condition Condition `xml:"Condition"`

	Then Then `xml:"Then"`

	Else *Else `xml:"Else"`

	StatementSetOptions *SetOptionsType `xml:"StatementSetOptions"`

	InnerXml string `xml:",innerxml"`
}

type StmtCursorType struct {
	XMLName xml.Name

	StatementCompId int `xml:"StatementCompId,attr,omitempty"`

	StatementEstRows float64 `xml:"StatementEstRows,attr,omitempty"`

	StatementId int `xml:"StatementId,attr,omitempty"`

	StatementOptmLevel string `xml:"StatementOptmLevel,attr,omitempty"`

	StatementOptmEarlyAbortReason string `xml:"StatementOptmEarlyAbortReason,attr,omitempty"`

	CardinalityEstimationModelVersion string `xml:"CardinalityEstimationModelVersion,attr,omitempty"`

	StatementSubTreeCost float64 `xml:"StatementSubTreeCost,attr,omitempty"`

	StatementText string `xml:"StatementText,attr,omitempty"`

	StatementType string `xml:"StatementType,attr,omitempty"`

	TemplatePlanGuideDB string `xml:"TemplatePlanGuideDB,attr,omitempty"`

	TemplatePlanGuideName string `xml:"TemplatePlanGuideName,attr,omitempty"`

	PlanGuideDB string `xml:"PlanGuideDB,attr,omitempty"`

	PlanGuideName string `xml:"PlanGuideName,attr,omitempty"`

	ParameterizedText string `xml:"ParameterizedText,attr,omitempty"`

	ParameterizedPlanHandle string `xml:"ParameterizedPlanHandle,attr,omitempty"`

	QueryHash string `xml:"QueryHash,attr,omitempty"`

	QueryPlanHash string `xml:"QueryPlanHash,attr,omitempty"`

	RetrievedFromCache string `xml:"RetrievedFromCache,attr,omitempty"`

	StatementSqlHandle string `xml:"StatementSqlHandle,attr,omitempty"`

	DatabaseContextSettingsId uint64 `xml:"DatabaseContextSettingsId,attr,omitempty"`

	ParentObjectId uint64 `xml:"ParentObjectId,attr,omitempty"`

	BatchSqlHandle string `xml:"BatchSqlHandle,attr,omitempty"`

	StatementParameterizationType int `xml:"StatementParameterizationType,attr,omitempty"`

	SecurityPolicyApplied bool `xml:"SecurityPolicyApplied,attr,omitempty"`

	BatchModeOnRowStoreUsed bool `xml:"BatchModeOnRowStoreUsed,attr,omitempty"`

	CursorPlan CursorPlanType `xml:"CursorPlan"`

	StatementSetOptions *SetOptionsType `xml:"StatementSetOptions"`

	InnerXml string `xml:",innerxml"`
}

type StmtReceiveType struct {
	XMLName xml.Name

	StatementCompId int `xml:"StatementCompId,attr,omitempty"`

	StatementEstRows float64 `xml:"StatementEstRows,attr,omitempty"`

	StatementId int `xml:"StatementId,attr,omitempty"`

	StatementOptmLevel string `xml:"StatementOptmLevel,attr,omitempty"`

	StatementOptmEarlyAbortReason string `xml:"StatementOptmEarlyAbortReason,attr,omitempty"`

	CardinalityEstimationModelVersion string `xml:"CardinalityEstimationModelVersion,attr,omitempty"`

	StatementSubTreeCost float64 `xml:"StatementSubTreeCost,attr,omitempty"`

	StatementText string `xml:"StatementText,attr,omitempty"`

	StatementType string `xml:"StatementType,attr,omitempty"`

	TemplatePlanGuideDB string `xml:"TemplatePlanGuideDB,attr,omitempty"`

	TemplatePlanGuideName string `xml:"TemplatePlanGuideName,attr,omitempty"`

	PlanGuideDB string `xml:"PlanGuideDB,attr,omitempty"`

	PlanGuideName string `xml:"PlanGuideName,attr,omitempty"`

	ParameterizedText string `xml:"ParameterizedText,attr,omitempty"`

	ParameterizedPlanHandle string `xml:"ParameterizedPlanHandle,attr,omitempty"`

	QueryHash string `xml:"QueryHash,attr,omitempty"`

	QueryPlanHash string `xml:"QueryPlanHash,attr,omitempty"`

	RetrievedFromCache string `xml:"RetrievedFromCache,attr,omitempty"`

	StatementSqlHandle string `xml:"StatementSqlHandle,attr,omitempty"`

	DatabaseContextSettingsId uint64 `xml:"DatabaseContextSettingsId,attr,omitempty"`

	ParentObjectId uint64 `xml:"ParentObjectId,attr,omitempty"`

	BatchSqlHandle string `xml:"BatchSqlHandle,attr,omitempty"`

	StatementParameterizationType int `xml:"StatementParameterizationType,attr,omitempty"`

	SecurityPolicyApplied bool `xml:"SecurityPolicyApplied,attr,omitempty"`

	BatchModeOnRowStoreUsed bool `xml:"BatchModeOnRowStoreUsed,attr,omitempty"`

	ReceivePlan ReceivePlanType `xml:"ReceivePlan"`

	StatementSetOptions *SetOptionsType `xml:"StatementSetOptions"`

	InnerXml string `xml:",innerxml"`
}

type FunctionType struct {
	XMLName xml.Name

	ProcName string `xml:"ProcName,attr"`

	IsNativelyCompiled bool `xml:"IsNativelyCompiled,attr,omitempty"`

	Statements StmtBlockType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type CursorPlanType struct {
	XMLName xml.Name

	CursorName string `xml:"CursorName,attr"`

	CursorActualType CursorType `xml:"CursorActualType,attr"`

	CursorRequestedType CursorType `xml:"CursorRequestedType,attr"`

	CursorConcurrency string `xml:"CursorConcurrency,attr"`

	ForwardOnly bool `xml:"ForwardOnly,attr"`

	Operation []Operation `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type ReceivePlanType struct {
	XMLName xml.Name

	Operation []Operation `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type ColumnReferenceType struct {
	XMLName xml.Name

	Server string `xml:"Server,attr,omitempty"`

	Database string `xml:"Database,attr,omitempty"`

	Schema string `xml:"Schema,attr,omitempty"`

	Table string `xml:"Table,attr,omitempty"`

	Alias string `xml:"Alias,attr,omitempty"`

	Column string `xml:"Column,attr"`

	ComputedColumn bool `xml:"ComputedColumn,attr,omitempty"`

	ParameterDataType string `xml:"ParameterDataType,attr,omitempty"`

	ParameterCompiledValue string `xml:"ParameterCompiledValue,attr,omitempty"`

	ParameterRuntimeValue string `xml:"ParameterRuntimeValue,attr,omitempty"`

	ScalarOperator *ScalarType `xml:"ScalarOperator"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type SingleColumnReferenceType struct {
	XMLName xml.Name

	ColumnReference ColumnReferenceType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type ColumnReferenceListType struct {
	XMLName xml.Name

	ColumnReference []ColumnReferenceType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type ScanRangeType struct {
	XMLName xml.Name

	ScanType CompareOpType `xml:"ScanType,attr"`

	RangeColumns ColumnReferenceListType `xml:"RangeColumns"`

	RangeExpressions ScalarExpressionListType `xml:"RangeExpressions"`

	InnerXml string `xml:",innerxml"`
}

type SeekPredicateType struct {
	XMLName xml.Name

	Prefix *ScanRangeType `xml:"Prefix"`

	StartRange *ScanRangeType `xml:"StartRange"`

	EndRange *ScanRangeType `xml:"EndRange"`

	IsNotNull *SingleColumnReferenceType `xml:"IsNotNull"`

	InnerXml string `xml:",innerxml"`
}

type SeekPredicateNewType struct {
	XMLName xml.Name

	SeekKeys []SeekPredicateType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type SeekPredicatePartType struct {
	XMLName xml.Name

	SeekPredicateNew []SeekPredicateNewType `xml:"SeekPredicateNew"`

	InnerXml string `xml:",innerxml"`
}

type SeekPredicatesType struct {
	XMLName xml.Name

	SeekPredicate []SeekPredicateType `xml:"SeekPredicate"`

	SeekPredicateNew []SeekPredicateNewType `xml:"SeekPredicateNew"`

	SeekPredicatePart []SeekPredicatePartType `xml:"SeekPredicatePart"`

	InnerXml string `xml:",innerxml"`
}

type ObjectType struct {
	XMLName xml.Name

	Server string `xml:"Server,attr,omitempty"`

	Database string `xml:"Database,attr,omitempty"`

	Schema string `xml:"Schema,attr,omitempty"`

	Table string `xml:"Table,attr,omitempty"`

	Index string `xml:"Index,attr,omitempty"`

	Filtered bool `xml:"Filtered,attr,omitempty"`

	Alias string `xml:"Alias,attr,omitempty"`

	TableReferenceId int `xml:"TableReferenceId,attr,omitempty"`

	IndexKind IndexKindType `xml:"IndexKind,attr,omitempty"`

	CloneAccessScope CloneAccessScopeType `xml:"CloneAccessScope,attr,omitempty"`

	Storage StorageType `xml:"Storage,attr,omitempty"`

	GraphWorkTableType int `xml:"GraphWorkTableType,attr,omitempty"`

	GraphWorkTableIdentifier int `xml:"GraphWorkTableIdentifier,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

type OrderByType struct {
	XMLName xml.Name

	OrderByColumn []OrderByColumn `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type DefinedValuesListType struct {
	XMLName xml.Name

	DefinedValue []DefinedValue `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type SpillToTempDbType struct {
	XMLName xml.Name

	SpillLevel uint64 `xml:"SpillLevel,attr,omitempty"`

	SpilledThreadCount uint64 `xml:"SpilledThreadCount,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

type SortSpillDetailsType struct {
	XMLName xml.Name

	GrantedMemoryKb uint64 `xml:"GrantedMemoryKb,attr,omitempty"`

	UsedMemoryKb uint64 `xml:"UsedMemoryKb,attr,omitempty"`

	WritesToTempDb uint64 `xml:"WritesToTempDb,attr,omitempty"`

	ReadsFromTempDb uint64 `xml:"ReadsFromTempDb,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

type HashSpillDetailsType struct {
	XMLName xml.Name

	GrantedMemoryKb uint64 `xml:"GrantedMemoryKb,attr,omitempty"`

	UsedMemoryKb uint64 `xml:"UsedMemoryKb,attr,omitempty"`

	WritesToTempDb uint64 `xml:"WritesToTempDb,attr,omitempty"`

	ReadsFromTempDb uint64 `xml:"ReadsFromTempDb,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

type ExchangeSpillDetailsType struct {
	XMLName xml.Name

	WritesToTempDb uint64 `xml:"WritesToTempDb,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

type WaitWarningType struct {
	XMLName xml.Name

	WaitType string `xml:"WaitType,attr"`

	WaitTime uint64 `xml:"WaitTime,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

type WaitStatType struct {
	XMLName xml.Name

	WaitType string `xml:"WaitType,attr"`

	WaitTimeMs uint64 `xml:"WaitTimeMs,attr"`

	WaitCount uint64 `xml:"WaitCount,attr"`

	InnerXml string `xml:",innerxml"`
}

type WaitStatListType struct {
	XMLName xml.Name

	Wait []WaitStatType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type QueryExecTimeType struct {
	XMLName xml.Name

	CpuTime uint64 `xml:"CpuTime,attr"`

	ElapsedTime uint64 `xml:"ElapsedTime,attr"`

	UdfCpuTime uint64 `xml:"UdfCpuTime,attr,omitempty"`

	UdfElapsedTime uint64 `xml:"UdfElapsedTime,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

type AffectingConvertWarningType struct {
	XMLName xml.Name

	ConvertIssue string `xml:"ConvertIssue,attr"`

	Expression string `xml:"Expression,attr"`

	InnerXml string `xml:",innerxml"`
}

type WarningsType struct {
	XMLName xml.Name

	NoJoinPredicate bool `xml:"NoJoinPredicate,attr,omitempty"`

	SpatialGuess bool `xml:"SpatialGuess,attr,omitempty"`

	UnmatchedIndexes bool `xml:"UnmatchedIndexes,attr,omitempty"`

	FullUpdateForOnlineIndexBuild bool `xml:"FullUpdateForOnlineIndexBuild,attr,omitempty"`

	SpillOccurred []SpillOccurredType `xml:"SpillOccurred"`

	ColumnsWithNoStatistics []ColumnReferenceListType `xml:"ColumnsWithNoStatistics"`

	SpillToTempDb []SpillToTempDbType `xml:"SpillToTempDb"`

	Wait []WaitWarningType `xml:"Wait"`

	PlanAffectingConvert []AffectingConvertWarningType `xml:"PlanAffectingConvert"`

	SortSpillDetails []SortSpillDetailsType `xml:"SortSpillDetails"`

	HashSpillDetails []HashSpillDetailsType `xml:"HashSpillDetails"`

	ExchangeSpillDetails []ExchangeSpillDetailsType `xml:"ExchangeSpillDetails"`

	MemoryGrantWarning []MemoryGrantWarningInfo `xml:"MemoryGrantWarning"`

	InnerXml string `xml:",innerxml"`
}

type SpillOccurredType struct {
	XMLName xml.Name

	Detail bool `xml:"Detail,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

type MemoryFractionsType struct {
	XMLName xml.Name

	Input float64 `xml:"Input,attr"`

	Output float64 `xml:"Output,attr"`

	InnerXml string `xml:",innerxml"`
}

type MemoryGrantType struct {
	XMLName xml.Name

	SerialRequiredMemory uint64 `xml:"SerialRequiredMemory,attr"`

	SerialDesiredMemory uint64 `xml:"SerialDesiredMemory,attr"`

	RequiredMemory uint64 `xml:"RequiredMemory,attr,omitempty"`

	DesiredMemory uint64 `xml:"DesiredMemory,attr,omitempty"`

	RequestedMemory uint64 `xml:"RequestedMemory,attr,omitempty"`

	GrantWaitTime uint64 `xml:"GrantWaitTime,attr,omitempty"`

	GrantedMemory uint64 `xml:"GrantedMemory,attr,omitempty"`

	MaxUsedMemory uint64 `xml:"MaxUsedMemory,attr,omitempty"`

	MaxQueryMemory uint64 `xml:"MaxQueryMemory,attr,omitempty"`

	LastRequestedMemory uint64 `xml:"LastRequestedMemory,attr,omitempty"`

	IsMemoryGrantFeedbackAdjusted MemoryGrantFeedbackInfoType `xml:"IsMemoryGrantFeedbackAdjusted,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

type MemoryGrantWarningInfo struct {
	XMLName xml.Name

	GrantWarningKind MemoryGrantWarningType `xml:"GrantWarningKind,attr"`

	RequestedMemory uint64 `xml:"RequestedMemory,attr"`

	GrantedMemory uint64 `xml:"GrantedMemory,attr"`

	MaxUsedMemory uint64 `xml:"MaxUsedMemory,attr"`

	InnerXml string `xml:",innerxml"`
}

type TraceFlagType struct {
	XMLName xml.Name

	Value uint64 `xml:"Value,attr"`

	Scope TraceFlagScopeType `xml:"Scope,attr"`

	InnerXml string `xml:",innerxml"`
}

type TraceFlagListType struct {
	XMLName xml.Name

	IsCompileTime bool `xml:"IsCompileTime,attr"`

	TraceFlag []TraceFlagType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type OptimizerHardwareDependentPropertiesType struct {
	XMLName xml.Name

	EstimatedAvailableMemoryGrant uint64 `xml:"EstimatedAvailableMemoryGrant,attr"`

	EstimatedPagesCached uint64 `xml:"EstimatedPagesCached,attr"`

	EstimatedAvailableDegreeOfParallelism uint64 `xml:"EstimatedAvailableDegreeOfParallelism,attr,omitempty"`

	MaxCompileMemory uint64 `xml:"MaxCompileMemory,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

type StatsInfoType struct {
	XMLName xml.Name

	Database string `xml:"Database,attr,omitempty"`

	Schema string `xml:"Schema,attr,omitempty"`

	Table string `xml:"Table,attr,omitempty"`

	Statistics string `xml:"Statistics,attr"`

	ModificationCount uint64 `xml:"ModificationCount,attr"`

	SamplingPercent float64 `xml:"SamplingPercent,attr"`

	LastUpdate string `xml:"LastUpdate,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

type OptimizerStatsUsageType struct {
	XMLName xml.Name

	StatisticsInfo []StatsInfoType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type RunTimeInformationType struct {
	XMLName xml.Name

	RunTimeCountersPerThread []RunTimeCountersPerThread `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type RunTimePartitionSummaryType struct {
	XMLName xml.Name

	PartitionsAccessed PartitionsAccessed `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type IndexedViewInfoType struct {
	XMLName xml.Name

	Object []ObjectType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type RollupInfoType struct {
	XMLName xml.Name

	HighestLevel int `xml:"HighestLevel,attr"`

	RollupLevel []RollupLevelType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type RollupLevelType struct {
	XMLName xml.Name

	Level int `xml:"Level,attr"`

	InnerXml string `xml:",innerxml"`
}

type StarJoinInfoType struct {
	XMLName xml.Name

	Root bool `xml:"Root,attr,omitempty"`

	OperationType string `xml:"OperationType,attr"`

	InnerXml string `xml:",innerxml"`
}

type InternalInfoType struct {
	XMLName xml.Name

	InnerXml string `xml:",innerxml"`
}

type ThreadStatType struct {
	XMLName xml.Name

	Branches int `xml:"Branches,attr"`

	UsedThreads int `xml:"UsedThreads,attr,omitempty"`

	ThreadReservation []ThreadReservationType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type ThreadReservationType struct {
	XMLName xml.Name

	NodeId int `xml:"NodeId,attr"`

	ReservedThreads int `xml:"ReservedThreads,attr"`

	InnerXml string `xml:",innerxml"`
}

type MissingIndexesType struct {
	XMLName xml.Name

	MissingIndexGroup []MissingIndexGroupType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type MissingIndexGroupType struct {
	XMLName xml.Name

	Impact float64 `xml:"Impact,attr"`

	MissingIndex []MissingIndexType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type MissingIndexType struct {
	XMLName xml.Name

	Database string `xml:"Database,attr"`

	Schema string `xml:"Schema,attr"`

	Table string `xml:"Table,attr"`

	ColumnGroup []ColumnGroupType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type ColumnGroupType struct {
	XMLName xml.Name

	Usage string `xml:"Usage,attr"`

	Column []ColumnType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type ColumnType struct {
	XMLName xml.Name

	Name string `xml:"Name,attr"`

	ColumnId int `xml:"ColumnId,attr"`

	InnerXml string `xml:",innerxml"`
}

type QueryPlanType struct {
	XMLName xml.Name

	DegreeOfParallelism int `xml:"DegreeOfParallelism,attr,omitempty"`

	EffectiveDegreeOfParallelism int `xml:"EffectiveDegreeOfParallelism,attr,omitempty"`

	NonParallelPlanReason string `xml:"NonParallelPlanReason,attr,omitempty"`

	MemoryGrant uint64 `xml:"MemoryGrant,attr,omitempty"`

	CachedPlanSize uint64 `xml:"CachedPlanSize,attr,omitempty"`

	CompileTime uint64 `xml:"CompileTime,attr,omitempty"`

	CompileCPU uint64 `xml:"CompileCPU,attr,omitempty"`

	CompileMemory uint64 `xml:"CompileMemory,attr,omitempty"`

	UsePlan bool `xml:"UsePlan,attr,omitempty"`

	ContainsInterleavedExecutionCandidates bool `xml:"ContainsInterleavedExecutionCandidates,attr,omitempty"`

	ContainsInlineScalarTsqlUdfs bool `xml:"ContainsInlineScalarTsqlUdfs,attr,omitempty"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	ThreadStat *ThreadStatType `xml:"ThreadStat"`

	MissingIndexes *MissingIndexesType `xml:"MissingIndexes"`

	GuessedSelectivity *GuessedSelectivityType `xml:"GuessedSelectivity"`

	UnmatchedIndexes *UnmatchedIndexesType `xml:"UnmatchedIndexes"`

	Warnings *WarningsType `xml:"Warnings"`

	MemoryGrantInfo *MemoryGrantType `xml:"MemoryGrantInfo"`

	OptimizerHardwareDependentProperties *OptimizerHardwareDependentPropertiesType `xml:"OptimizerHardwareDependentProperties"`

	OptimizerStatsUsage *OptimizerStatsUsageType `xml:"OptimizerStatsUsage"`

	TraceFlags []TraceFlagListType `xml:"TraceFlags"`

	WaitStats *WaitStatListType `xml:"WaitStats"`

	QueryTimeStats *QueryExecTimeType `xml:"QueryTimeStats"`

	RelOp RelOpType `xml:"RelOp"`

	ParameterList *ColumnReferenceListType `xml:"ParameterList"`

	InnerXml string `xml:",innerxml"`
}

type GuessedSelectivityType struct {
	XMLName xml.Name

	Spatial ObjectType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type UnmatchedIndexesType struct {
	XMLName xml.Name

	Parameterization ParameterizationType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type ParameterizationType struct {
	XMLName xml.Name

	Object []ObjectType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type RelOpType struct {
	XMLName xml.Name

	AvgRowSize float64 `xml:"AvgRowSize,attr"`

	EstimateCPU float64 `xml:"EstimateCPU,attr"`

	EstimateIO float64 `xml:"EstimateIO,attr"`

	EstimateRebinds float64 `xml:"EstimateRebinds,attr"`

	EstimateRewinds float64 `xml:"EstimateRewinds,attr"`

	EstimatedExecutionMode ExecutionModeType `xml:"EstimatedExecutionMode,attr,omitempty"`

	GroupExecuted bool `xml:"GroupExecuted,attr,omitempty"`

	EstimateRows float64 `xml:"EstimateRows,attr"`

	EstimateRowsWithoutRowGoal float64 `xml:"EstimateRowsWithoutRowGoal,attr,omitempty"`

	EstimatedRowsRead float64 `xml:"EstimatedRowsRead,attr,omitempty"`

	LogicalOp LogicalOpType `xml:"LogicalOp,attr"`

	NodeId int `xml:"NodeId,attr"`

	Parallel bool `xml:"Parallel,attr"`

	RemoteDataAccess bool `xml:"RemoteDataAccess,attr,omitempty"`

	Partitioned bool `xml:"Partitioned,attr,omitempty"`

	PhysicalOp PhysicalOpType `xml:"PhysicalOp,attr"`

	IsAdaptive bool `xml:"IsAdaptive,attr,omitempty"`

	AdaptiveThresholdRows float64 `xml:"AdaptiveThresholdRows,attr,omitempty"`

	EstimatedTotalSubtreeCost float64 `xml:"EstimatedTotalSubtreeCost,attr"`

	TableCardinality float64 `xml:"TableCardinality,attr,omitempty"`

	StatsCollectionId uint64 `xml:"StatsCollectionId,attr,omitempty"`

	EstimatedJoinType PhysicalOpType `xml:"EstimatedJoinType,attr,omitempty"`

	PDWAccumulativeCost float64 `xml:"PDWAccumulativeCost,attr,omitempty"`

	OutputList ColumnReferenceListType `xml:"OutputList"`

	Warnings *WarningsType `xml:"Warnings"`

	MemoryFractions *MemoryFractionsType `xml:"MemoryFractions"`

	RunTimeInformation *RunTimeInformationType `xml:"RunTimeInformation"`

	RunTimePartitionSummary *RunTimePartitionSummaryType `xml:"RunTimePartitionSummary"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	AdaptiveJoin *AdaptiveJoinType `xml:"AdaptiveJoin"`

	Apply *JoinType `xml:"Apply"`

	Assert *FilterType `xml:"Assert"`

	BatchHashTableBuild *BatchHashTableBuildType `xml:"BatchHashTableBuild"`

	Bitmap *BitmapType `xml:"Bitmap"`

	Collapse *CollapseType `xml:"Collapse"`

	ComputeScalar *ComputeScalarType `xml:"ComputeScalar"`

	Concat *ConcatType `xml:"Concat"`

	ConstantScan *ConstantScanType `xml:"ConstantScan"`

	ConstTableGet *GetType `xml:"ConstTableGet"`

	CreateIndex *CreateIndexType `xml:"CreateIndex"`

	Delete *DMLOpType `xml:"Delete"`

	DeletedScan *RowsetType `xml:"DeletedScan"`

	Extension *UDXType `xml:"Extension"`

	ExternalSelect *ExternalSelectType `xml:"ExternalSelect"`

	ExtExtractScan *RemoteType `xml:"ExtExtractScan"`

	Filter *FilterType `xml:"Filter"`

	ForeignKeyReferencesCheck *ForeignKeyReferencesCheckType `xml:"ForeignKeyReferencesCheck"`

	GbAgg *GbAggType `xml:"GbAgg"`

	GbApply *GbApplyType `xml:"GbApply"`

	Generic *GenericType `xml:"Generic"`

	Get *GetType `xml:"Get"`

	Hash *HashType `xml:"Hash"`

	IndexScan *IndexScanType `xml:"IndexScan"`

	InsertedScan *RowsetType `xml:"InsertedScan"`

	Insert *DMLOpType `xml:"Insert"`

	Join *JoinType `xml:"Join"`

	LocalCube *LocalCubeType `xml:"LocalCube"`

	LogRowScan *RelOpBaseType `xml:"LogRowScan"`

	Merge *MergeType `xml:"Merge"`

	MergeInterval *SimpleIteratorOneChildType `xml:"MergeInterval"`

	Move *MoveType `xml:"Move"`

	NestedLoops *NestedLoopsType `xml:"NestedLoops"`

	OnlineIndex *CreateIndexType `xml:"OnlineIndex"`

	Parallelism *ParallelismType `xml:"Parallelism"`

	ParameterTableScan *RelOpBaseType `xml:"ParameterTableScan"`

	PrintDataflow *RelOpBaseType `xml:"PrintDataflow"`

	Project *ProjectType `xml:"Project"`

	Put *PutType `xml:"Put"`

	RemoteFetch *RemoteFetchType `xml:"RemoteFetch"`

	RemoteModify *RemoteModifyType `xml:"RemoteModify"`

	RemoteQuery *RemoteQueryType `xml:"RemoteQuery"`

	RemoteRange *RemoteRangeType `xml:"RemoteRange"`

	RemoteScan *RemoteType `xml:"RemoteScan"`

	RowCountSpool *SpoolType `xml:"RowCountSpool"`

	ScalarInsert *ScalarInsertType `xml:"ScalarInsert"`

	Segment *SegmentType `xml:"Segment"`

	Sequence *SequenceType `xml:"Sequence"`

	SequenceProject *ComputeScalarType `xml:"SequenceProject"`

	SimpleUpdate *SimpleUpdateType `xml:"SimpleUpdate"`

	Sort *SortType `xml:"Sort"`

	Split *SplitType `xml:"Split"`

	Spool *SpoolType `xml:"Spool"`

	StreamAggregate *StreamAggregateType `xml:"StreamAggregate"`

	Switch *SwitchType `xml:"Switch"`

	TableScan *TableScanType `xml:"TableScan"`

	TableValuedFunction *TableValuedFunctionType `xml:"TableValuedFunction"`

	Top *TopType `xml:"Top"`

	TopSort *TopSortType `xml:"TopSort"`

	Update *UpdateType `xml:"Update"`

	Union *ConcatType `xml:"Union"`

	UnionAll *ConcatType `xml:"UnionAll"`

	WindowSpool *WindowType `xml:"WindowSpool"`

	WindowAggregate *WindowAggregateType `xml:"WindowAggregate"`

	XcsScan *XcsScanType `xml:"XcsScan"`

	InnerXml string `xml:",innerxml"`
}

type RelOpBaseType struct {
	XMLName xml.Name

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type AdaptiveJoinType struct {
	XMLName xml.Name

	BitmapCreator bool `xml:"BitmapCreator,attr,omitempty"`

	Optimized bool `xml:"Optimized,attr"`

	WithOrderedPrefetch bool `xml:"WithOrderedPrefetch,attr,omitempty"`

	WithUnorderedPrefetch bool `xml:"WithUnorderedPrefetch,attr,omitempty"`

	HashKeysBuild *ColumnReferenceListType `xml:"HashKeysBuild"`

	HashKeysProbe *ColumnReferenceListType `xml:"HashKeysProbe"`

	BuildResidual *ScalarExpressionType `xml:"BuildResidual"`

	ProbeResidual *ScalarExpressionType `xml:"ProbeResidual"`

	StarJoinInfo *StarJoinInfoType `xml:"StarJoinInfo"`

	Predicate *ScalarExpressionType `xml:"Predicate"`

	PassThru *ScalarExpressionType `xml:"PassThru"`

	OuterReferences *ColumnReferenceListType `xml:"OuterReferences"`

	PartitionId *SingleColumnReferenceType `xml:"PartitionId"`

	RelOp []RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type ForeignKeyReferencesCheckType struct {
	XMLName xml.Name

	ForeignKeyReferencesCount int `xml:"ForeignKeyReferencesCount,attr,omitempty"`

	NoMatchingIndexCount int `xml:"NoMatchingIndexCount,attr,omitempty"`

	PartialMatchingIndexCount int `xml:"PartialMatchingIndexCount,attr,omitempty"`

	RelOp RelOpType `xml:"RelOp"`

	ForeignKeyReferenceCheck []ForeignKeyReferenceCheckType `xml:"ForeignKeyReferenceCheck"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type ForeignKeyReferenceCheckType struct {
	XMLName xml.Name

	IndexScan IndexScanType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type SimpleIteratorOneChildType struct {
	XMLName xml.Name

	RelOp RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type FilterType struct {
	XMLName xml.Name

	StartupExpression bool `xml:"StartupExpression,attr"`

	RelOp RelOpType `xml:"RelOp"`

	Predicate ScalarExpressionType `xml:"Predicate"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type ConstantScanType struct {
	XMLName xml.Name

	Values *Values `xml:"Values"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type RowsetType struct {
	XMLName xml.Name

	Object []ObjectType `xml:"Object"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type TableScanType struct {
	XMLName xml.Name

	Ordered bool `xml:"Ordered,attr"`

	ForcedIndex bool `xml:"ForcedIndex,attr,omitempty"`

	ForceScan bool `xml:"ForceScan,attr,omitempty"`

	NoExpandHint bool `xml:"NoExpandHint,attr,omitempty"`

	Storage StorageType `xml:"Storage,attr,omitempty"`

	Predicate *ScalarExpressionType `xml:"Predicate"`

	PartitionId *SingleColumnReferenceType `xml:"PartitionId"`

	IndexedViewInfo *IndexedViewInfoType `xml:"IndexedViewInfo"`

	Object []ObjectType `xml:"Object"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type XcsScanType struct {
	XMLName xml.Name

	Ordered bool `xml:"Ordered,attr"`

	ForcedIndex bool `xml:"ForcedIndex,attr,omitempty"`

	ForceScan bool `xml:"ForceScan,attr,omitempty"`

	NoExpandHint bool `xml:"NoExpandHint,attr,omitempty"`

	Storage StorageType `xml:"Storage,attr,omitempty"`

	Predicate *ScalarExpressionType `xml:"Predicate"`

	PartitionId *SingleColumnReferenceType `xml:"PartitionId"`

	IndexedViewInfo *IndexedViewInfoType `xml:"IndexedViewInfo"`

	RelOp RelOpType `xml:"RelOp"`

	Object []ObjectType `xml:"Object"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type IndexScanType struct {
	XMLName xml.Name

	Lookup bool `xml:"Lookup,attr,omitempty"`

	Ordered bool `xml:"Ordered,attr"`

	ScanDirection OrderType `xml:"ScanDirection,attr,omitempty"`

	ForcedIndex bool `xml:"ForcedIndex,attr,omitempty"`

	ForceSeek bool `xml:"ForceSeek,attr,omitempty"`

	ForceSeekColumnCount int `xml:"ForceSeekColumnCount,attr,omitempty"`

	ForceScan bool `xml:"ForceScan,attr,omitempty"`

	NoExpandHint bool `xml:"NoExpandHint,attr,omitempty"`

	Storage StorageType `xml:"Storage,attr,omitempty"`

	DynamicSeek bool `xml:"DynamicSeek,attr,omitempty"`

	SBSFileUrl string `xml:"SBSFileUrl,attr,omitempty"`

	SeekPredicates *SeekPredicatesType `xml:"SeekPredicates"`

	Predicate []ScalarExpressionType `xml:"Predicate"`

	PartitionId *SingleColumnReferenceType `xml:"PartitionId"`

	IndexedViewInfo *IndexedViewInfoType `xml:"IndexedViewInfo"`

	Object []ObjectType `xml:"Object"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type TableValuedFunctionType struct {
	XMLName xml.Name

	Object *ObjectType `xml:"Object"`

	Predicate *ScalarExpressionType `xml:"Predicate"`

	RelOp *RelOpType `xml:"RelOp"`

	ParameterList *ScalarExpressionListType `xml:"ParameterList"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type HashType struct {
	XMLName xml.Name

	BitmapCreator bool `xml:"BitmapCreator,attr,omitempty"`

	HashKeysBuild *ColumnReferenceListType `xml:"HashKeysBuild"`

	HashKeysProbe *ColumnReferenceListType `xml:"HashKeysProbe"`

	BuildResidual *ScalarExpressionType `xml:"BuildResidual"`

	ProbeResidual *ScalarExpressionType `xml:"ProbeResidual"`

	StarJoinInfo *StarJoinInfoType `xml:"StarJoinInfo"`

	RelOp []RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type ComputeScalarType struct {
	XMLName xml.Name

	ComputeSequence bool `xml:"ComputeSequence,attr,omitempty"`

	RelOp RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type ParallelismType struct {
	XMLName xml.Name

	PartitioningType PartitionType `xml:"PartitioningType,attr,omitempty"`

	Remoting bool `xml:"Remoting,attr,omitempty"`

	LocalParallelism bool `xml:"LocalParallelism,attr,omitempty"`

	InRow bool `xml:"InRow,attr,omitempty"`

	PartitionColumns *ColumnReferenceListType `xml:"PartitionColumns"`

	OrderBy *OrderByType `xml:"OrderBy"`

	HashKeys *ColumnReferenceListType `xml:"HashKeys"`

	ProbeColumn *SingleColumnReferenceType `xml:"ProbeColumn"`

	Predicate *ScalarExpressionType `xml:"Predicate"`

	Activation *Activation `xml:"Activation"`

	BrickRouting *BrickRouting `xml:"BrickRouting"`

	RelOp RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type StreamAggregateType struct {
	XMLName xml.Name

	GroupBy *ColumnReferenceListType `xml:"GroupBy"`

	RollupInfo *RollupInfoType `xml:"RollupInfo"`

	RelOp RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type SortType struct {
	XMLName xml.Name

	Distinct bool `xml:"Distinct,attr"`

	OrderBy OrderByType `xml:"OrderBy"`

	PartitionId *SingleColumnReferenceType `xml:"PartitionId"`

	RelOp RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type BitmapType struct {
	XMLName xml.Name

	HashKeys ColumnReferenceListType `xml:"HashKeys"`

	RelOp RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type CollapseType struct {
	XMLName xml.Name

	GroupBy ColumnReferenceListType `xml:"GroupBy"`

	RelOp RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type ConcatType struct {
	XMLName xml.Name

	RelOp []RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type SwitchType struct {
	XMLName xml.Name

	Predicate *ScalarExpressionType `xml:"Predicate"`

	RelOp []RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type MergeType struct {
	XMLName xml.Name

	ManyToMany bool `xml:"ManyToMany,attr,omitempty"`

	InnerSideJoinColumns *ColumnReferenceListType `xml:"InnerSideJoinColumns"`

	OuterSideJoinColumns *ColumnReferenceListType `xml:"OuterSideJoinColumns"`

	Residual *ScalarExpressionType `xml:"Residual"`

	PassThru *ScalarExpressionType `xml:"PassThru"`

	StarJoinInfo *StarJoinInfoType `xml:"StarJoinInfo"`

	RelOp []RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type NestedLoopsType struct {
	XMLName xml.Name

	Optimized bool `xml:"Optimized,attr"`

	WithOrderedPrefetch bool `xml:"WithOrderedPrefetch,attr,omitempty"`

	WithUnorderedPrefetch bool `xml:"WithUnorderedPrefetch,attr,omitempty"`

	Predicate *ScalarExpressionType `xml:"Predicate"`

	PassThru *ScalarExpressionType `xml:"PassThru"`

	OuterReferences *ColumnReferenceListType `xml:"OuterReferences"`

	PartitionId *SingleColumnReferenceType `xml:"PartitionId"`

	ProbeColumn *SingleColumnReferenceType `xml:"ProbeColumn"`

	StarJoinInfo *StarJoinInfoType `xml:"StarJoinInfo"`

	RelOp []RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type SegmentType struct {
	XMLName xml.Name

	GroupBy ColumnReferenceListType `xml:"GroupBy"`

	SegmentColumn SingleColumnReferenceType `xml:"SegmentColumn"`

	RelOp RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type SequenceType struct {
	XMLName xml.Name

	IsGraphDBTransitiveClosure bool `xml:"IsGraphDBTransitiveClosure,attr,omitempty"`

	GraphSequenceIdentifier int64 `xml:"GraphSequenceIdentifier,attr,omitempty"`

	RelOp []RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type SplitType struct {
	XMLName xml.Name

	ActionColumn *SingleColumnReferenceType `xml:"ActionColumn"`

	RelOp RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type TopType struct {
	XMLName xml.Name

	RowCount bool `xml:"RowCount,attr,omitempty"`

	Rows int `xml:"Rows,attr,omitempty"`

	IsPercent bool `xml:"IsPercent,attr,omitempty"`

	WithTies bool `xml:"WithTies,attr,omitempty"`

	TopLocation string `xml:"TopLocation,attr,omitempty"`

	TieColumns *ColumnReferenceListType `xml:"TieColumns"`

	OffsetExpression *ScalarExpressionType `xml:"OffsetExpression"`

	TopExpression *ScalarExpressionType `xml:"TopExpression"`

	RelOp RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type UDXType struct {
	XMLName xml.Name

	UDXName string `xml:"UDXName,attr"`

	UsedUDXColumns *ColumnReferenceListType `xml:"UsedUDXColumns"`

	RelOp *RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type WindowType struct {
	XMLName xml.Name

	RelOp *RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type WindowAggregateType struct {
	XMLName xml.Name

	RelOp *RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type PutType struct {
	XMLName xml.Name

	IsExternallyComputed string `xml:"IsExternallyComputed,attr,omitempty"`

	ShuffleType string `xml:"ShuffleType,attr,omitempty"`

	ShuffleColumn string `xml:"ShuffleColumn,attr,omitempty"`

	RemoteQuery string `xml:"RemoteQuery,attr,omitempty"`

	RemoteDestination string `xml:"RemoteDestination,attr,omitempty"`

	RemoteSource string `xml:"RemoteSource,attr,omitempty"`

	RemoteObject string `xml:"RemoteObject,attr,omitempty"`

	RelOp *RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type SimpleUpdateType struct {
	XMLName xml.Name

	DMLRequestSort bool `xml:"DMLRequestSort,attr,omitempty"`

	SetPredicate *ScalarExpressionType `xml:"SetPredicate"`

	SeekPredicate *SeekPredicateType `xml:"SeekPredicate"`

	SeekPredicateNew *SeekPredicateNewType `xml:"SeekPredicateNew"`

	Object []ObjectType `xml:"Object"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type SetPredicateElementType struct {
	XMLName xml.Name

	SetPredicateType SetPredicateType `xml:"SetPredicateType,attr,omitempty"`

	ScalarOperator ScalarType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type UpdateType struct {
	XMLName xml.Name

	WithOrderedPrefetch bool `xml:"WithOrderedPrefetch,attr,omitempty"`

	WithUnorderedPrefetch bool `xml:"WithUnorderedPrefetch,attr,omitempty"`

	DMLRequestSort bool `xml:"DMLRequestSort,attr,omitempty"`

	SetPredicate []SetPredicateElementType `xml:"SetPredicate"`

	ProbeColumn *SingleColumnReferenceType `xml:"ProbeColumn"`

	ActionColumn *SingleColumnReferenceType `xml:"ActionColumn"`

	OriginalActionColumn *SingleColumnReferenceType `xml:"OriginalActionColumn"`

	AssignmentMap *AssignmentMapType `xml:"AssignmentMap"`

	SourceTable *ParameterizationType `xml:"SourceTable"`

	TargetTable *ParameterizationType `xml:"TargetTable"`

	RelOp RelOpType `xml:"RelOp"`

	Object []ObjectType `xml:"Object"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type CreateIndexType struct {
	XMLName xml.Name

	RelOp RelOpType `xml:"RelOp"`

	Object []ObjectType `xml:"Object"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type SpoolType struct {
	XMLName xml.Name

	Stack bool `xml:"Stack,attr,omitempty"`

	PrimaryNodeId int `xml:"PrimaryNodeId,attr,omitempty"`

	RelOp *RelOpType `xml:"RelOp"`

	SeekPredicate *SeekPredicateType `xml:"SeekPredicate"`

	SeekPredicateNew *SeekPredicateNewType `xml:"SeekPredicateNew"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type BatchHashTableBuildType struct {
	XMLName xml.Name

	BitmapCreator bool `xml:"BitmapCreator,attr,omitempty"`

	RelOp RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type ScalarInsertType struct {
	XMLName xml.Name

	DMLRequestSort bool `xml:"DMLRequestSort,attr,omitempty"`

	SetPredicate *ScalarExpressionType `xml:"SetPredicate"`

	Object []ObjectType `xml:"Object"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type TopSortType struct {
	XMLName xml.Name

	Rows string `xml:"Rows,attr"`

	WithTies string `xml:"WithTies,attr,omitempty"`

	Distinct bool `xml:"Distinct,attr"`

	OrderBy OrderByType `xml:"OrderBy"`

	PartitionId *SingleColumnReferenceType `xml:"PartitionId"`

	RelOp RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type RemoteType struct {
	XMLName xml.Name

	RemoteDestination string `xml:"RemoteDestination,attr,omitempty"`

	RemoteSource string `xml:"RemoteSource,attr,omitempty"`

	RemoteObject string `xml:"RemoteObject,attr,omitempty"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type RemoteRangeType struct {
	XMLName xml.Name

	RemoteDestination string `xml:"RemoteDestination,attr,omitempty"`

	RemoteSource string `xml:"RemoteSource,attr,omitempty"`

	RemoteObject string `xml:"RemoteObject,attr,omitempty"`

	SeekPredicates *SeekPredicatesType `xml:"SeekPredicates"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type RemoteFetchType struct {
	XMLName xml.Name

	RemoteDestination string `xml:"RemoteDestination,attr,omitempty"`

	RemoteSource string `xml:"RemoteSource,attr,omitempty"`

	RemoteObject string `xml:"RemoteObject,attr,omitempty"`

	RelOp RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type RemoteModifyType struct {
	XMLName xml.Name

	RemoteDestination string `xml:"RemoteDestination,attr,omitempty"`

	RemoteSource string `xml:"RemoteSource,attr,omitempty"`

	RemoteObject string `xml:"RemoteObject,attr,omitempty"`

	SetPredicate *ScalarExpressionType `xml:"SetPredicate"`

	RelOp RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type RemoteQueryType struct {
	XMLName xml.Name

	RemoteQuery string `xml:"RemoteQuery,attr,omitempty"`

	RemoteDestination string `xml:"RemoteDestination,attr,omitempty"`

	RemoteSource string `xml:"RemoteSource,attr,omitempty"`

	RemoteObject string `xml:"RemoteObject,attr,omitempty"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type GenericType struct {
	XMLName xml.Name

	RelOp []RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type MoveType struct {
	XMLName xml.Name

	MoveType string `xml:"MoveType,attr,omitempty"`

	DistributionType string `xml:"DistributionType,attr,omitempty"`

	IsDistributed bool `xml:"IsDistributed,attr,omitempty"`

	IsExternal bool `xml:"IsExternal,attr,omitempty"`

	IsFull bool `xml:"IsFull,attr,omitempty"`

	DistributionKey *ColumnReferenceListType `xml:"DistributionKey"`

	RelOp []RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type ExternalSelectType struct {
	XMLName xml.Name

	MaterializeOperation string `xml:"MaterializeOperation,attr,omitempty"`

	DistributionType string `xml:"DistributionType,attr,omitempty"`

	IsDistributed bool `xml:"IsDistributed,attr,omitempty"`

	IsExternal bool `xml:"IsExternal,attr,omitempty"`

	IsFull bool `xml:"IsFull,attr,omitempty"`

	RelOp []RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type ProjectType struct {
	XMLName xml.Name

	IsNoOp bool `xml:"IsNoOp,attr,omitempty"`

	RelOp []RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type JoinType struct {
	XMLName xml.Name

	Predicate []ScalarExpressionType `xml:"Predicate"`

	Probe []SingleColumnReferenceType `xml:"Probe"`

	RelOp []RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type GbApplyType struct {
	XMLName xml.Name

	JoinType string `xml:"JoinType,attr,omitempty"`

	AggType string `xml:"AggType,attr,omitempty"`

	Predicate []ScalarExpressionType `xml:"Predicate"`

	AggFunctions *DefinedValuesListType `xml:"AggFunctions"`

	RelOp []RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type GbAggType struct {
	XMLName xml.Name

	IsScalar bool `xml:"IsScalar,attr,omitempty"`

	AggType string `xml:"AggType,attr,omitempty"`

	HintType string `xml:"HintType,attr,omitempty"`

	GroupBy *ColumnReferenceListType `xml:"GroupBy"`

	AggFunctions *DefinedValuesListType `xml:"AggFunctions"`

	RelOp []RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type GroupingSetReferenceType struct {
	XMLName xml.Name

	Value string `xml:"Value,attr"`

	InnerXml string `xml:",innerxml"`
}

type GroupingSetListType struct {
	XMLName xml.Name

	GroupingSet []GroupingSetReferenceType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type LocalCubeType struct {
	XMLName xml.Name

	GroupBy *ColumnReferenceListType `xml:"GroupBy"`

	GroupingSets *GroupingSetListType `xml:"GroupingSets"`

	RelOp []RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type DMLOpType struct {
	XMLName xml.Name

	AssignmentMap *AssignmentMapType `xml:"AssignmentMap"`

	SourceTable *ParameterizationType `xml:"SourceTable"`

	TargetTable *ParameterizationType `xml:"TargetTable"`

	RelOp []RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type AssignmentMapType struct {
	XMLName xml.Name

	Assign []AssignType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type GetType struct {
	XMLName xml.Name

	NumRows int `xml:"NumRows,attr,omitempty"`

	IsExternal bool `xml:"IsExternal,attr,omitempty"`

	IsDistributed bool `xml:"IsDistributed,attr,omitempty"`

	IsHashDistributed bool `xml:"IsHashDistributed,attr,omitempty"`

	IsReplicated bool `xml:"IsReplicated,attr,omitempty"`

	IsRoundRobin bool `xml:"IsRoundRobin,attr,omitempty"`

	Bookmarks *ColumnReferenceListType `xml:"Bookmarks"`

	OutputColumns *OutputColumnsType `xml:"OutputColumns"`

	GeneratedData *ScalarExpressionListType `xml:"GeneratedData"`

	RelOp []RelOpType `xml:"RelOp"`

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	InnerXml string `xml:",innerxml"`
}

type OutputColumnsType struct {
	XMLName xml.Name

	DefinedValues *DefinedValuesListType `xml:"DefinedValues"`

	Object []ObjectType `xml:"Object"`

	InnerXml string `xml:",innerxml"`
}

type ScalarType struct {
	XMLName xml.Name

	ScalarString string `xml:"ScalarString,attr,omitempty"`

	InternalInfo *InternalInfoType `xml:"InternalInfo"`

	Aggregate *AggregateType `xml:"Aggregate"`

	Arithmetic *ArithmeticType `xml:"Arithmetic"`

	Assign *AssignType `xml:"Assign"`

	Compare *CompareType `xml:"Compare"`

	Const *ConstType `xml:"Const"`

	Convert *ConvertType `xml:"Convert"`

	Identifier *IdentType `xml:"Identifier"`

	IF *ConditionalType `xml:"IF"`

	Intrinsic *IntrinsicType `xml:"Intrinsic"`

	Logical *LogicalType `xml:"Logical"`

	MultipleAssign *MultAssignType `xml:"MultipleAssign"`

	ScalarExpressionList *ScalarExpressionListType `xml:"ScalarExpressionList"`

	Sequence *ScalarSequenceType `xml:"Sequence"`

	Subquery *SubqueryType `xml:"Subquery"`

	UDTMethod *UDTMethodType `xml:"UDTMethod"`

	UserDefinedAggregate *UDAggregateType `xml:"UserDefinedAggregate"`

	UserDefinedFunction *UDFType `xml:"UserDefinedFunction"`

	InnerXml string `xml:",innerxml"`
}

type ScalarExpressionType struct {
	XMLName xml.Name

	ScalarOperator ScalarType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type ScalarExpressionListType struct {
	XMLName xml.Name

	ScalarOperator []ScalarType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type ConstType struct {
	XMLName xml.Name

	ConstValue string `xml:"ConstValue,attr"`

	InnerXml string `xml:",innerxml"`
}

type IdentType struct {
	XMLName xml.Name

	Table string `xml:"Table,attr"`

	ColumnReference *ColumnReferenceType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type CompareType struct {
	XMLName xml.Name

	CompareOp CompareOpType `xml:"CompareOp,attr"`

	ScalarOperator []ScalarType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type ConvertType struct {
	XMLName xml.Name

	DataType string `xml:"DataType,attr"`

	Length int `xml:"Length,attr,omitempty"`

	Precision int `xml:"Precision,attr,omitempty"`

	Scale int `xml:"Scale,attr,omitempty"`

	Style int `xml:"Style,attr"`

	Implicit bool `xml:"Implicit,attr"`

	StylePtr *ScalarExpressionType `xml:"Style"`

	ScalarOperator ScalarType `xml:"ScalarOperator"`

	InnerXml string `xml:",innerxml"`
}

type ArithmeticType struct {
	XMLName xml.Name

	Operation ArithmeticOperationType `xml:"Operation,attr"`

	ScalarOperator []ScalarType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type LogicalType struct {
	XMLName xml.Name

	Operation LogicalOperationType `xml:"Operation,attr"`

	ScalarOperator []ScalarType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type UDAggregateType struct {
	XMLName xml.Name

	Distinct bool `xml:"Distinct,attr"`

	UDAggObject *ObjectType `xml:"UDAggObject"`

	ScalarOperator []ScalarType `xml:"ScalarOperator"`

	InnerXml string `xml:",innerxml"`
}

type AggregateType struct {
	XMLName xml.Name

	AggType string `xml:"AggType,attr"`

	Distinct bool `xml:"Distinct,attr"`

	ScalarOperator []ScalarType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type AssignType struct {
	XMLName xml.Name

	ScalarOperator ScalarType `xml:"ScalarOperator"`

	SourceColumn []ColumnReferenceType `xml:"SourceColumn"`

	TargetColumn []ColumnReferenceType `xml:"TargetColumn"`

	ColumnReference *ColumnReferenceType `xml:"ColumnReference"`

	ScalarOperatorPtr *ScalarType `xml:"ScalarOperator"`

	InnerXml string `xml:",innerxml"`
}

type MultAssignType struct {
	XMLName xml.Name

	Assign []AssignType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type ConditionalType struct {
	XMLName xml.Name

	Condition ScalarExpressionType `xml:"Condition"`

	Then ScalarExpressionType `xml:"Then"`

	Else ScalarExpressionType `xml:"Else"`

	InnerXml string `xml:",innerxml"`
}

type IntrinsicType struct {
	XMLName xml.Name

	FunctionName string `xml:"FunctionName,attr"`

	ScalarOperator []ScalarType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type ScalarSequenceType struct {
	XMLName xml.Name

	FunctionName string `xml:"FunctionName,attr"`

	InnerXml string `xml:",innerxml"`
}

type UDFType struct {
	XMLName xml.Name

	FunctionName string `xml:"FunctionName,attr"`

	IsClrFunction bool `xml:"IsClrFunction,attr,omitempty"`

	ScalarOperator []ScalarType `xml:"ScalarOperator"`

	CLRFunction *CLRFunctionType `xml:"CLRFunction"`

	InnerXml string `xml:",innerxml"`
}

type UDTMethodType struct {
	XMLName xml.Name

	CLRFunction *CLRFunctionType `xml:"CLRFunction"`

	ScalarOperator []ScalarType `xml:"ScalarOperator"`

	InnerXml string `xml:",innerxml"`
}

type CLRFunctionType struct {
	XMLName xml.Name

	Assembly string `xml:"Assembly,attr,omitempty"`

	Class string `xml:"Class,attr"`

	Method string `xml:"Method,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

type SubqueryType struct {
	XMLName xml.Name

	Operation SubqueryOperationType `xml:"Operation,attr"`

	ScalarOperator *ScalarType `xml:"ScalarOperator"`

	RelOp RelOpType `xml:"RelOp"`

	InnerXml string `xml:",innerxml"`
}

type SetOptionsType struct {
	XMLName xml.Name

	ANSINULLS bool `xml:"ANSI_NULLS,attr"`

	ANSIPADDING bool `xml:"ANSI_PADDING,attr"`

	ANSIWARNINGS bool `xml:"ANSI_WARNINGS,attr"`

	ARITHABORT bool `xml:"ARITHABORT,attr"`

	CONCATNULLYIELDSNULL bool `xml:"CONCAT_NULL_YIELDS_NULL,attr"`

	NUMERICROUNDABORT bool `xml:"NUMERIC_ROUNDABORT,attr"`

	QUOTEDIDENTIFIER bool `xml:"QUOTED_IDENTIFIER,attr"`

	InnerXml string `xml:",innerxml"`
}

// XSD SimpleType declarations

type StorageType string

const StorageTypeRowstore StorageType = "RowStore"

const StorageTypeColumnstore StorageType = "ColumnStore"

const StorageTypeMemoryoptimized StorageType = "MemoryOptimized"

type ExecutionModeType string

const ExecutionModeTypeRow ExecutionModeType = "Row"

const ExecutionModeTypeBatch ExecutionModeType = "Batch"

type CursorType string

const CursorTypeDynamic CursorType = "Dynamic"

const CursorTypeFastforward CursorType = "FastForward"

const CursorTypeKeyset CursorType = "Keyset"

const CursorTypeSnapshot CursorType = "SnapShot"

type MemoryGrantWarningType string

const MemoryGrantWarningTypeExcessiveGrant MemoryGrantWarningType = "Excessive Grant"

const MemoryGrantWarningTypeUsedMoreThanGranted MemoryGrantWarningType = "Used More Than Granted"

const MemoryGrantWarningTypeGrantIncrease MemoryGrantWarningType = "Grant Increase"

type MemoryGrantFeedbackInfoType string

const MemoryGrantFeedbackInfoTypeYesAdjusting MemoryGrantFeedbackInfoType = "Yes: Adjusting"

const MemoryGrantFeedbackInfoTypeYesStable MemoryGrantFeedbackInfoType = "Yes: Stable"

const MemoryGrantFeedbackInfoTypeNoFirstExecution MemoryGrantFeedbackInfoType = "No: First Execution"

const MemoryGrantFeedbackInfoTypeNoAccurateGrant MemoryGrantFeedbackInfoType = "No: Accurate Grant"

const MemoryGrantFeedbackInfoTypeNoFeedbackDisabled MemoryGrantFeedbackInfoType = "No: Feedback Disabled"

type TraceFlagScopeType string

const TraceFlagScopeTypeGlobal TraceFlagScopeType = "Global"

const TraceFlagScopeTypeSession TraceFlagScopeType = "Session"

type SubqueryOperationType string

const SubqueryOperationTypeEqAll SubqueryOperationType = "EQ ALL"

const SubqueryOperationTypeEqAny SubqueryOperationType = "EQ ANY"

const SubqueryOperationTypeExists SubqueryOperationType = "EXISTS"

const SubqueryOperationTypeGeAll SubqueryOperationType = "GE ALL"

const SubqueryOperationTypeGeAny SubqueryOperationType = "GE ANY"

const SubqueryOperationTypeGtAll SubqueryOperationType = "GT ALL"

const SubqueryOperationTypeGtAny SubqueryOperationType = "GT ANY"

const SubqueryOperationTypeIn SubqueryOperationType = "IN"

const SubqueryOperationTypeLeAll SubqueryOperationType = "LE ALL"

const SubqueryOperationTypeLeAny SubqueryOperationType = "LE ANY"

const SubqueryOperationTypeLtAll SubqueryOperationType = "LT ALL"

const SubqueryOperationTypeLtAny SubqueryOperationType = "LT ANY"

const SubqueryOperationTypeNeAll SubqueryOperationType = "NE ALL"

const SubqueryOperationTypeNeAny SubqueryOperationType = "NE ANY"

type OrderType string

const OrderTypeBackward OrderType = "BACKWARD"

const OrderTypeForward OrderType = "FORWARD"

type SetPredicateType string

const SetPredicateTypeUpdate SetPredicateType = "Update"

const SetPredicateTypeInsert SetPredicateType = "Insert"

type PartitionType string

const PartitionTypeBroadcast PartitionType = "Broadcast"

const PartitionTypeDemand PartitionType = "Demand"

const PartitionTypeHash PartitionType = "Hash"

const PartitionTypeNopartitioning PartitionType = "NoPartitioning"

const PartitionTypeRange PartitionType = "Range"

const PartitionTypeRoundrobin PartitionType = "RoundRobin"

const PartitionTypeClonelocation PartitionType = "CloneLocation"

type CompareOpType string

const CompareOpTypeBinaryIs CompareOpType = "BINARY IS"

const CompareOpTypeBothNull CompareOpType = "BOTH NULL"

const CompareOpTypeEq CompareOpType = "EQ"

const CompareOpTypeGe CompareOpType = "GE"

const CompareOpTypeGt CompareOpType = "GT"

const CompareOpTypeIs CompareOpType = "IS"

const CompareOpTypeIsNot CompareOpType = "IS NOT"

const CompareOpTypeIsNotNull CompareOpType = "IS NOT NULL"

const CompareOpTypeIsNull CompareOpType = "IS NULL"

const CompareOpTypeLe CompareOpType = "LE"

const CompareOpTypeLt CompareOpType = "LT"

const CompareOpTypeNe CompareOpType = "NE"

const CompareOpTypeOneNull CompareOpType = "ONE NULL"

type ArithmeticOperationType string

const ArithmeticOperationTypeAdd ArithmeticOperationType = "ADD"

const ArithmeticOperationTypeBitAdd ArithmeticOperationType = "BIT_ADD"

const ArithmeticOperationTypeBitAnd ArithmeticOperationType = "BIT_AND"

const ArithmeticOperationTypeBitCombine ArithmeticOperationType = "BIT_COMBINE"

const ArithmeticOperationTypeBitNot ArithmeticOperationType = "BIT_NOT"

const ArithmeticOperationTypeBitOr ArithmeticOperationType = "BIT_OR"

const ArithmeticOperationTypeBitXor ArithmeticOperationType = "BIT_XOR"

const ArithmeticOperationTypeDiv ArithmeticOperationType = "DIV"

const ArithmeticOperationTypeHash ArithmeticOperationType = "HASH"

const ArithmeticOperationTypeMinus ArithmeticOperationType = "MINUS"

const ArithmeticOperationTypeMod ArithmeticOperationType = "MOD"

const ArithmeticOperationTypeMult ArithmeticOperationType = "MULT"

const ArithmeticOperationTypeSub ArithmeticOperationType = "SUB"

type LogicalOperationType string

const LogicalOperationTypeAnd LogicalOperationType = "AND"

const LogicalOperationTypeImplies LogicalOperationType = "IMPLIES"

const LogicalOperationTypeIsNotNull LogicalOperationType = "IS NOT NULL"

const LogicalOperationTypeIsNull LogicalOperationType = "IS NULL"

const LogicalOperationTypeIs LogicalOperationType = "IS"

const LogicalOperationTypeIsfalseornull LogicalOperationType = "IsFalseOrNull"

const LogicalOperationTypeNot LogicalOperationType = "NOT"

const LogicalOperationTypeOr LogicalOperationType = "OR"

const LogicalOperationTypeXor LogicalOperationType = "XOR"

type LogicalOpType string

const LogicalOpTypeAggregate LogicalOpType = "Aggregate"

const LogicalOpTypeAntiDiff LogicalOpType = "Anti Diff"

const LogicalOpTypeAssert LogicalOpType = "Assert"

const LogicalOpTypeAsyncConcat LogicalOpType = "Async Concat"

const LogicalOpTypeBatchHashTableBuild LogicalOpType = "Batch Hash Table Build"

const LogicalOpTypeBitmapCreate LogicalOpType = "Bitmap Create"

const LogicalOpTypeClusteredIndexScan LogicalOpType = "Clustered Index Scan"

const LogicalOpTypeClusteredIndexSeek LogicalOpType = "Clustered Index Seek"

const LogicalOpTypeClusteredUpdate LogicalOpType = "Clustered Update"

const LogicalOpTypeCollapse LogicalOpType = "Collapse"

const LogicalOpTypeComputeScalar LogicalOpType = "Compute Scalar"

const LogicalOpTypeConcatenation LogicalOpType = "Concatenation"

const LogicalOpTypeConstantScan LogicalOpType = "Constant Scan"

const LogicalOpTypeConstantTableGet LogicalOpType = "Constant Table Get"

const LogicalOpTypeCrossJoin LogicalOpType = "Cross Join"

const LogicalOpTypeDelete LogicalOpType = "Delete"

const LogicalOpTypeDeletedScan LogicalOpType = "Deleted Scan"

const LogicalOpTypeDistinctSort LogicalOpType = "Distinct Sort"

const LogicalOpTypeDistinct LogicalOpType = "Distinct"

const LogicalOpTypeDistributeStreams LogicalOpType = "Distribute Streams"

const LogicalOpTypeEagerSpool LogicalOpType = "Eager Spool"

const LogicalOpTypeExternalExtractionScan LogicalOpType = "External Extraction Scan"

const LogicalOpTypeExternalSelect LogicalOpType = "External Select"

const LogicalOpTypeFilter LogicalOpType = "Filter"

const LogicalOpTypeFlowDistinct LogicalOpType = "Flow Distinct"

const LogicalOpTypeForeignKeyReferencesCheck LogicalOpType = "Foreign Key References Check"

const LogicalOpTypeFullOuterJoin LogicalOpType = "Full Outer Join"

const LogicalOpTypeGatherStreams LogicalOpType = "Gather Streams"

const LogicalOpTypeGbagg LogicalOpType = "GbAgg"

const LogicalOpTypeGbapply LogicalOpType = "GbApply"

const LogicalOpTypeGet LogicalOpType = "Get"

const LogicalOpTypeGeneric LogicalOpType = "Generic"

const LogicalOpTypeInnerApply LogicalOpType = "Inner Apply"

const LogicalOpTypeIndexScan LogicalOpType = "Index Scan"

const LogicalOpTypeIndexSeek LogicalOpType = "Index Seek"

const LogicalOpTypeInnerJoin LogicalOpType = "Inner Join"

const LogicalOpTypeInsert LogicalOpType = "Insert"

const LogicalOpTypeInsertedScan LogicalOpType = "Inserted Scan"

const LogicalOpTypeIntersect LogicalOpType = "Intersect"

const LogicalOpTypeIntersectAll LogicalOpType = "Intersect All"

const LogicalOpTypeLazySpool LogicalOpType = "Lazy Spool"

const LogicalOpTypeLeftAntiSemiApply LogicalOpType = "Left Anti Semi Apply"

const LogicalOpTypeLeftSemiApply LogicalOpType = "Left Semi Apply"

const LogicalOpTypeLeftOuterApply LogicalOpType = "Left Outer Apply"

const LogicalOpTypeLeftAntiSemiJoin LogicalOpType = "Left Anti Semi Join"

const LogicalOpTypeLeftDiff LogicalOpType = "Left Diff"

const LogicalOpTypeLeftDiffAll LogicalOpType = "Left Diff All"

const LogicalOpTypeLeftOuterJoin LogicalOpType = "Left Outer Join"

const LogicalOpTypeLeftSemiJoin LogicalOpType = "Left Semi Join"

const LogicalOpTypeLocalcube LogicalOpType = "LocalCube"

const LogicalOpTypeLogRowScan LogicalOpType = "LogEntry Row Scan"

const LogicalOpTypeMerge LogicalOpType = "Merge"

const LogicalOpTypeMergeInterval LogicalOpType = "Merge Interval"

const LogicalOpTypeMergeStats LogicalOpType = "Merge Stats"

const LogicalOpTypeMove LogicalOpType = "Move"

const LogicalOpTypeParameterTableScan LogicalOpType = "Parameter Table Scan"

const LogicalOpTypePartialAggregate LogicalOpType = "Partial Aggregate"

const LogicalOpTypePrint LogicalOpType = "Print"

const LogicalOpTypeProject LogicalOpType = "Project"

const LogicalOpTypePut LogicalOpType = "Put"

const LogicalOpTypeRank LogicalOpType = "Rank"

const LogicalOpTypeRemoteDelete LogicalOpType = "Remote Delete"

const LogicalOpTypeRemoteIndexScan LogicalOpType = "Remote Index Scan"

const LogicalOpTypeRemoteIndexSeek LogicalOpType = "Remote Index Seek"

const LogicalOpTypeRemoteInsert LogicalOpType = "Remote Insert"

const LogicalOpTypeRemoteQuery LogicalOpType = "Remote Query"

const LogicalOpTypeRemoteScan LogicalOpType = "Remote Scan"

const LogicalOpTypeRemoteUpdate LogicalOpType = "Remote Update"

const LogicalOpTypeRepartitionStreams LogicalOpType = "Repartition Streams"

const LogicalOpTypeRidLookup LogicalOpType = "RID Lookup"

const LogicalOpTypeRightAntiSemiJoin LogicalOpType = "Right Anti Semi Join"

const LogicalOpTypeRightDiff LogicalOpType = "Right Diff"

const LogicalOpTypeRightDiffAll LogicalOpType = "Right Diff All"

const LogicalOpTypeRightOuterJoin LogicalOpType = "Right Outer Join"

const LogicalOpTypeRightSemiJoin LogicalOpType = "Right Semi Join"

const LogicalOpTypeSegment LogicalOpType = "Segment"

const LogicalOpTypeSequence LogicalOpType = "Sequence"

const LogicalOpTypeSort LogicalOpType = "Sort"

const LogicalOpTypeSplit LogicalOpType = "Split"

const LogicalOpTypeSwitch LogicalOpType = "Switch"

const LogicalOpTypeTableValuedFunction LogicalOpType = "Table-valued function"

const LogicalOpTypeTableScan LogicalOpType = "Table Scan"

const LogicalOpTypeTop LogicalOpType = "Top"

const LogicalOpTypeTopnSort LogicalOpType = "TopN Sort"

const LogicalOpTypeUdx LogicalOpType = "UDX"

const LogicalOpTypeUnion LogicalOpType = "Union"

const LogicalOpTypeUnionAll LogicalOpType = "Union All"

const LogicalOpTypeUpdate LogicalOpType = "Update"

const LogicalOpTypeLocalStats LogicalOpType = "Local Stats"

const LogicalOpTypeWindowSpool LogicalOpType = "Window Spool"

const LogicalOpTypeWindowAggregate LogicalOpType = "Window Aggregate"

const LogicalOpTypeKeyLookup LogicalOpType = "Key Lookup"

const LogicalOpTypeExtensibleColumnStoreScan LogicalOpType = "Extensible Column Store Scan"

type PhysicalOpType string

const PhysicalOpTypeAdaptiveJoin PhysicalOpType = "Adaptive Join"

const PhysicalOpTypeApply PhysicalOpType = "Apply"

const PhysicalOpTypeAssert PhysicalOpType = "Assert"

const PhysicalOpTypeBatchHashTableBuild PhysicalOpType = "Batch Hash Table Build"

const PhysicalOpTypeBitmap PhysicalOpType = "Bitmap"

const PhysicalOpTypeBroadcast PhysicalOpType = "Broadcast"

const PhysicalOpTypeClusteredIndexDelete PhysicalOpType = "Clustered Index Delete"

const PhysicalOpTypeClusteredIndexInsert PhysicalOpType = "Clustered Index Insert"

const PhysicalOpTypeClusteredIndexScan PhysicalOpType = "Clustered Index Scan"

const PhysicalOpTypeClusteredIndexSeek PhysicalOpType = "Clustered Index Seek"

const PhysicalOpTypeClusteredIndexUpdate PhysicalOpType = "Clustered Index Update"

const PhysicalOpTypeClusteredIndexMerge PhysicalOpType = "Clustered Index Merge"

const PhysicalOpTypeClusteredUpdate PhysicalOpType = "Clustered Update"

const PhysicalOpTypeCollapse PhysicalOpType = "Collapse"

const PhysicalOpTypeColumnstoreIndexDelete PhysicalOpType = "Columnstore Index Delete"

const PhysicalOpTypeColumnstoreIndexInsert PhysicalOpType = "Columnstore Index Insert"

const PhysicalOpTypeColumnstoreIndexMerge PhysicalOpType = "Columnstore Index Merge"

const PhysicalOpTypeColumnstoreIndexScan PhysicalOpType = "Columnstore Index Scan"

const PhysicalOpTypeColumnstoreIndexUpdate PhysicalOpType = "Columnstore Index Update"

const PhysicalOpTypeComputeScalar PhysicalOpType = "Compute Scalar"

const PhysicalOpTypeComputeToControlNode PhysicalOpType = "Compute To Control Node"

const PhysicalOpTypeConcatenation PhysicalOpType = "Concatenation"

const PhysicalOpTypeConstantScan PhysicalOpType = "Constant Scan"

const PhysicalOpTypeConstantTableGet PhysicalOpType = "Constant Table Get"

const PhysicalOpTypeControlToComputeNodes PhysicalOpType = "Control To Compute Nodes"

const PhysicalOpTypeDelete PhysicalOpType = "Delete"

const PhysicalOpTypeDeletedScan PhysicalOpType = "Deleted Scan"

const PhysicalOpTypeExternalBroadcast PhysicalOpType = "External Broadcast"

const PhysicalOpTypeExternalExtractionScan PhysicalOpType = "External Extraction Scan"

const PhysicalOpTypeExternalLocalStreaming PhysicalOpType = "External Local Streaming"

const PhysicalOpTypeExternalRoundRobin PhysicalOpType = "External Round Robin"

const PhysicalOpTypeExternalSelect PhysicalOpType = "External Select"

const PhysicalOpTypeExternalShuffle PhysicalOpType = "External Shuffle"

const PhysicalOpTypeFilter PhysicalOpType = "Filter"

const PhysicalOpTypeForeignKeyReferencesCheck PhysicalOpType = "Foreign Key References Check"

const PhysicalOpTypeGbagg PhysicalOpType = "GbAgg"

const PhysicalOpTypeGbapply PhysicalOpType = "GbApply"

const PhysicalOpTypeGet PhysicalOpType = "Get"

const PhysicalOpTypeGeneric PhysicalOpType = "Generic"

const PhysicalOpTypeHashMatch PhysicalOpType = "Hash Match"

const PhysicalOpTypeIndexDelete PhysicalOpType = "Index Delete"

const PhysicalOpTypeIndexInsert PhysicalOpType = "Index Insert"

const PhysicalOpTypeIndexScan PhysicalOpType = "Index Scan"

const PhysicalOpTypeInsert PhysicalOpType = "Insert"

const PhysicalOpTypeJoin PhysicalOpType = "Join"

const PhysicalOpTypeIndexSeek PhysicalOpType = "Index Seek"

const PhysicalOpTypeIndexSpool PhysicalOpType = "Index Spool"

const PhysicalOpTypeIndexUpdate PhysicalOpType = "Index Update"

const PhysicalOpTypeInsertedScan PhysicalOpType = "Inserted Scan"

const PhysicalOpTypeLocalcube PhysicalOpType = "LocalCube"

const PhysicalOpTypeLogRowScan PhysicalOpType = "LogEntry Row Scan"

const PhysicalOpTypeMergeInterval PhysicalOpType = "Merge Interval"

const PhysicalOpTypeMergeJoin PhysicalOpType = "Merge Join"

const PhysicalOpTypeNestedLoops PhysicalOpType = "Nested Loops"

const PhysicalOpTypeOnlineIndexInsert PhysicalOpType = "Online Index Insert"

const PhysicalOpTypeParallelism PhysicalOpType = "Parallelism"

const PhysicalOpTypeParameterTableScan PhysicalOpType = "Parameter Table Scan"

const PhysicalOpTypePrint PhysicalOpType = "Print"

const PhysicalOpTypeProject PhysicalOpType = "Project"

const PhysicalOpTypePut PhysicalOpType = "Put"

const PhysicalOpTypeRank PhysicalOpType = "Rank"

const PhysicalOpTypeRemoteDelete PhysicalOpType = "Remote Delete"

const PhysicalOpTypeRemoteIndexScan PhysicalOpType = "Remote Index Scan"

const PhysicalOpTypeRemoteIndexSeek PhysicalOpType = "Remote Index Seek"

const PhysicalOpTypeRemoteInsert PhysicalOpType = "Remote Insert"

const PhysicalOpTypeRemoteQuery PhysicalOpType = "Remote Query"

const PhysicalOpTypeRemoteScan PhysicalOpType = "Remote Scan"

const PhysicalOpTypeRemoteUpdate PhysicalOpType = "Remote Update"

const PhysicalOpTypeRidLookup PhysicalOpType = "RID Lookup"

const PhysicalOpTypeRowCountSpool PhysicalOpType = "Row Count Spool"

const PhysicalOpTypeSegment PhysicalOpType = "Segment"

const PhysicalOpTypeSequence PhysicalOpType = "Sequence"

const PhysicalOpTypeSequenceProject PhysicalOpType = "Sequence Project"

const PhysicalOpTypeShuffle PhysicalOpType = "Shuffle"

const PhysicalOpTypeSingleSourceRoundRobinMove PhysicalOpType = "Single Source Round Robin Move"

const PhysicalOpTypeSort PhysicalOpType = "Sort"

const PhysicalOpTypeSplit PhysicalOpType = "Split"

const PhysicalOpTypeStreamAggregate PhysicalOpType = "Stream Aggregate"

const PhysicalOpTypeSwitch PhysicalOpType = "Switch"

const PhysicalOpTypeTableDelete PhysicalOpType = "Table Delete"

const PhysicalOpTypeTableInsert PhysicalOpType = "Table Insert"

const PhysicalOpTypeTableMerge PhysicalOpType = "Table Merge"

const PhysicalOpTypeTableScan PhysicalOpType = "Table Scan"

const PhysicalOpTypeTableSpool PhysicalOpType = "Table Spool"

const PhysicalOpTypeTableUpdate PhysicalOpType = "Table Update"

const PhysicalOpTypeTableValuedFunction PhysicalOpType = "Table-valued function"

const PhysicalOpTypeTop PhysicalOpType = "Top"

const PhysicalOpTypeTrim PhysicalOpType = "Trim"

const PhysicalOpTypeUdx PhysicalOpType = "UDX"

const PhysicalOpTypeUnion PhysicalOpType = "Union"

const PhysicalOpTypeUnionAll PhysicalOpType = "Union All"

const PhysicalOpTypeWindowAggregate PhysicalOpType = "Window Aggregate"

const PhysicalOpTypeWindowSpool PhysicalOpType = "Window Spool"

const PhysicalOpTypeKeyLookup PhysicalOpType = "Key Lookup"

const PhysicalOpTypeExtensibleColumnStoreScan PhysicalOpType = "Extensible Column Store Scan"

type IndexKindType string

const IndexKindTypeHeap IndexKindType = "Heap"

const IndexKindTypeClustered IndexKindType = "Clustered"

const IndexKindTypeFtschangetracking IndexKindType = "FTSChangeTracking"

const IndexKindTypeFtsmapping IndexKindType = "FTSMapping"

const IndexKindTypeNonclustered IndexKindType = "NonClustered"

const IndexKindTypePrimaryxml IndexKindType = "PrimaryXML"

const IndexKindTypeSecondaryxml IndexKindType = "SecondaryXML"

const IndexKindTypeSpatial IndexKindType = "Spatial"

const IndexKindTypeViewclustered IndexKindType = "ViewClustered"

const IndexKindTypeViewnonclustered IndexKindType = "ViewNonClustered"

const IndexKindTypeNonclusteredhash IndexKindType = "NonClusteredHash"

const IndexKindTypeSelectivexml IndexKindType = "SelectiveXML"

const IndexKindTypeSecondaryselectivexml IndexKindType = "SecondarySelectiveXML"

type CloneAccessScopeType string

const CloneAccessScopeTypePrimary CloneAccessScopeType = "Primary"

const CloneAccessScopeTypeSecondary CloneAccessScopeType = "Secondary"

const CloneAccessScopeTypeBoth CloneAccessScopeType = "Both"

const CloneAccessScopeTypeEither CloneAccessScopeType = "Either"

const CloneAccessScopeTypeExactmatch CloneAccessScopeType = "ExactMatch"

const CloneAccessScopeTypeLocal CloneAccessScopeType = "Local"
